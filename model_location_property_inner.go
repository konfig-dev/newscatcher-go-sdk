/*
NewsCatcher-V3 Production API

<img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>

API version: Beta-3.0.0
Contact: maksym@newscatcherapi.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package newscatcherapi

import (
	"encoding/json"
	"fmt"
)

// LocationPropertyInner struct for LocationPropertyInner
type LocationPropertyInner struct {
	int32 *int32
	string *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *LocationPropertyInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into int32
	err = json.Unmarshal(data, &dst.int32);
	if err == nil {
		jsonint32, _ := json.Marshal(dst.int32)
		if string(jsonint32) == "{}" { // empty struct
			dst.int32 = nil
		} else {
			return nil // data stored in dst.int32, return on the first match
		}
	} else {
		dst.int32 = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.string);
	if err == nil {
		jsonstring, _ := json.Marshal(dst.string)
		if string(jsonstring) == "{}" { // empty struct
			dst.string = nil
		} else {
			return nil // data stored in dst.string, return on the first match
		}
	} else {
		dst.string = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(LocationPropertyInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *LocationPropertyInner) MarshalJSON() ([]byte, error) {
	if src.int32 != nil {
		return json.Marshal(&src.int32)
	}

	if src.string != nil {
		return json.Marshal(&src.string)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableLocationPropertyInner struct {
	value *LocationPropertyInner
	isSet bool
}

func (v NullableLocationPropertyInner) Get() *LocationPropertyInner {
	return v.value
}

func (v *NullableLocationPropertyInner) Set(val *LocationPropertyInner) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationPropertyInner) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationPropertyInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationPropertyInner(val *LocationPropertyInner) *NullableLocationPropertyInner {
	return &NullableLocationPropertyInner{value: val, isSet: true}
}

func (v NullableLocationPropertyInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationPropertyInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


