/*
NewsCatcher-V3 Production API

<img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>

API version: Beta-3.0.0
Contact: maksym@newscatcherapi.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package newscatcherapi

import (
	"encoding/json"
)

// UserInput struct for UserInput
type UserInput struct {
	Lang *LangProperty `json:"lang,omitempty"`
	Countries *CountriesProperty `json:"countries,omitempty"`
}

// NewUserInput instantiates a new UserInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInput() *UserInput {
	this := UserInput{}
	return &this
}

// NewUserInputWithDefaults instantiates a new UserInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInputWithDefaults() *UserInput {
	this := UserInput{}
	return &this
}

// GetLang returns the Lang field value if set, zero value otherwise.
func (o *UserInput) GetLang() LangProperty {
	if o == nil || isNil(o.Lang) {
		var ret LangProperty
		return ret
	}
	return *o.Lang
}

// GetLangOk returns a tuple with the Lang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInput) GetLangOk() (*LangProperty, bool) {
	if o == nil || isNil(o.Lang) {
    return nil, false
	}
	return o.Lang, true
}

// HasLang returns a boolean if a field has been set.
func (o *UserInput) HasLang() bool {
	if o != nil && !isNil(o.Lang) {
		return true
	}

	return false
}

// SetLang gets a reference to the given LangProperty and assigns it to the Lang field.
func (o *UserInput) SetLang(v LangProperty) {
	o.Lang = &v
}

// GetCountries returns the Countries field value if set, zero value otherwise.
func (o *UserInput) GetCountries() CountriesProperty {
	if o == nil || isNil(o.Countries) {
		var ret CountriesProperty
		return ret
	}
	return *o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInput) GetCountriesOk() (*CountriesProperty, bool) {
	if o == nil || isNil(o.Countries) {
    return nil, false
	}
	return o.Countries, true
}

// HasCountries returns a boolean if a field has been set.
func (o *UserInput) HasCountries() bool {
	if o != nil && !isNil(o.Countries) {
		return true
	}

	return false
}

// SetCountries gets a reference to the given CountriesProperty and assigns it to the Countries field.
func (o *UserInput) SetCountries(v CountriesProperty) {
	o.Countries = &v
}

func (o UserInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Lang) {
		toSerialize["lang"] = o.Lang
	}
	if !isNil(o.Countries) {
		toSerialize["countries"] = o.Countries
	}
	return json.Marshal(toSerialize)
}

type NullableUserInput struct {
	value *UserInput
	isSet bool
}

func (v NullableUserInput) Get() *UserInput {
	return v.value
}

func (v *NullableUserInput) Set(val *UserInput) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInput) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInput(val *UserInput) *NullableUserInput {
	return &NullableUserInput{value: val, isSet: true}
}

func (v NullableUserInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


