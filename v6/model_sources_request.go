/*
NewsCatcher-V3 Production API

<img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>

API version: 3.2.16
Contact: maksym@newscatcherapi.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package newscatcherapi

import (
	"encoding/json"
)

// SourcesRequest Sources request DTO
type SourcesRequest struct {
	Lang *string `json:"lang,omitempty"`
	Countries *string `json:"countries,omitempty"`
	PredefinedSources *string `json:"predefined_sources,omitempty"`
	IncludeAdditionalInfo *bool `json:"include_additional_info,omitempty"`
	FromRank *int32 `json:"from_rank,omitempty"`
	ToRank *int32 `json:"to_rank,omitempty"`
	SourceName interface{} `json:"source_name,omitempty"`
	SourceUrl *string `json:"source_url,omitempty"`
}

// NewSourcesRequest instantiates a new SourcesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourcesRequest() *SourcesRequest {
	this := SourcesRequest{}
	return &this
}

// NewSourcesRequestWithDefaults instantiates a new SourcesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourcesRequestWithDefaults() *SourcesRequest {
	this := SourcesRequest{}
	return &this
}

// GetLang returns the Lang field value if set, zero value otherwise.
func (o *SourcesRequest) GetLang() string {
	if o == nil || isNil(o.Lang) {
		var ret string
		return ret
	}
	return *o.Lang
}

// GetLangOk returns a tuple with the Lang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourcesRequest) GetLangOk() (*string, bool) {
	if o == nil || isNil(o.Lang) {
    return nil, false
	}
	return o.Lang, true
}

// HasLang returns a boolean if a field has been set.
func (o *SourcesRequest) HasLang() bool {
	if o != nil && !isNil(o.Lang) {
		return true
	}

	return false
}

// SetLang gets a reference to the given string and assigns it to the Lang field.
func (o *SourcesRequest) SetLang(v string) {
	o.Lang = &v
}

// GetCountries returns the Countries field value if set, zero value otherwise.
func (o *SourcesRequest) GetCountries() string {
	if o == nil || isNil(o.Countries) {
		var ret string
		return ret
	}
	return *o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourcesRequest) GetCountriesOk() (*string, bool) {
	if o == nil || isNil(o.Countries) {
    return nil, false
	}
	return o.Countries, true
}

// HasCountries returns a boolean if a field has been set.
func (o *SourcesRequest) HasCountries() bool {
	if o != nil && !isNil(o.Countries) {
		return true
	}

	return false
}

// SetCountries gets a reference to the given string and assigns it to the Countries field.
func (o *SourcesRequest) SetCountries(v string) {
	o.Countries = &v
}

// GetPredefinedSources returns the PredefinedSources field value if set, zero value otherwise.
func (o *SourcesRequest) GetPredefinedSources() string {
	if o == nil || isNil(o.PredefinedSources) {
		var ret string
		return ret
	}
	return *o.PredefinedSources
}

// GetPredefinedSourcesOk returns a tuple with the PredefinedSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourcesRequest) GetPredefinedSourcesOk() (*string, bool) {
	if o == nil || isNil(o.PredefinedSources) {
    return nil, false
	}
	return o.PredefinedSources, true
}

// HasPredefinedSources returns a boolean if a field has been set.
func (o *SourcesRequest) HasPredefinedSources() bool {
	if o != nil && !isNil(o.PredefinedSources) {
		return true
	}

	return false
}

// SetPredefinedSources gets a reference to the given string and assigns it to the PredefinedSources field.
func (o *SourcesRequest) SetPredefinedSources(v string) {
	o.PredefinedSources = &v
}

// GetIncludeAdditionalInfo returns the IncludeAdditionalInfo field value if set, zero value otherwise.
func (o *SourcesRequest) GetIncludeAdditionalInfo() bool {
	if o == nil || isNil(o.IncludeAdditionalInfo) {
		var ret bool
		return ret
	}
	return *o.IncludeAdditionalInfo
}

// GetIncludeAdditionalInfoOk returns a tuple with the IncludeAdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourcesRequest) GetIncludeAdditionalInfoOk() (*bool, bool) {
	if o == nil || isNil(o.IncludeAdditionalInfo) {
    return nil, false
	}
	return o.IncludeAdditionalInfo, true
}

// HasIncludeAdditionalInfo returns a boolean if a field has been set.
func (o *SourcesRequest) HasIncludeAdditionalInfo() bool {
	if o != nil && !isNil(o.IncludeAdditionalInfo) {
		return true
	}

	return false
}

// SetIncludeAdditionalInfo gets a reference to the given bool and assigns it to the IncludeAdditionalInfo field.
func (o *SourcesRequest) SetIncludeAdditionalInfo(v bool) {
	o.IncludeAdditionalInfo = &v
}

// GetFromRank returns the FromRank field value if set, zero value otherwise.
func (o *SourcesRequest) GetFromRank() int32 {
	if o == nil || isNil(o.FromRank) {
		var ret int32
		return ret
	}
	return *o.FromRank
}

// GetFromRankOk returns a tuple with the FromRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourcesRequest) GetFromRankOk() (*int32, bool) {
	if o == nil || isNil(o.FromRank) {
    return nil, false
	}
	return o.FromRank, true
}

// HasFromRank returns a boolean if a field has been set.
func (o *SourcesRequest) HasFromRank() bool {
	if o != nil && !isNil(o.FromRank) {
		return true
	}

	return false
}

// SetFromRank gets a reference to the given int32 and assigns it to the FromRank field.
func (o *SourcesRequest) SetFromRank(v int32) {
	o.FromRank = &v
}

// GetToRank returns the ToRank field value if set, zero value otherwise.
func (o *SourcesRequest) GetToRank() int32 {
	if o == nil || isNil(o.ToRank) {
		var ret int32
		return ret
	}
	return *o.ToRank
}

// GetToRankOk returns a tuple with the ToRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourcesRequest) GetToRankOk() (*int32, bool) {
	if o == nil || isNil(o.ToRank) {
    return nil, false
	}
	return o.ToRank, true
}

// HasToRank returns a boolean if a field has been set.
func (o *SourcesRequest) HasToRank() bool {
	if o != nil && !isNil(o.ToRank) {
		return true
	}

	return false
}

// SetToRank gets a reference to the given int32 and assigns it to the ToRank field.
func (o *SourcesRequest) SetToRank(v int32) {
	o.ToRank = &v
}

// GetSourceName returns the SourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourcesRequest) GetSourceName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SourceName
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourcesRequest) GetSourceNameOk() (*interface{}, bool) {
	if o == nil || isNil(o.SourceName) {
    return nil, false
	}
	return &o.SourceName, true
}

// HasSourceName returns a boolean if a field has been set.
func (o *SourcesRequest) HasSourceName() bool {
	if o != nil && isNil(o.SourceName) {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given interface{} and assigns it to the SourceName field.
func (o *SourcesRequest) SetSourceName(v interface{}) {
	o.SourceName = v
}

// GetSourceUrl returns the SourceUrl field value if set, zero value otherwise.
func (o *SourcesRequest) GetSourceUrl() string {
	if o == nil || isNil(o.SourceUrl) {
		var ret string
		return ret
	}
	return *o.SourceUrl
}

// GetSourceUrlOk returns a tuple with the SourceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourcesRequest) GetSourceUrlOk() (*string, bool) {
	if o == nil || isNil(o.SourceUrl) {
    return nil, false
	}
	return o.SourceUrl, true
}

// HasSourceUrl returns a boolean if a field has been set.
func (o *SourcesRequest) HasSourceUrl() bool {
	if o != nil && !isNil(o.SourceUrl) {
		return true
	}

	return false
}

// SetSourceUrl gets a reference to the given string and assigns it to the SourceUrl field.
func (o *SourcesRequest) SetSourceUrl(v string) {
	o.SourceUrl = &v
}

func (o SourcesRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Lang) {
		toSerialize["lang"] = o.Lang
	}
	if !isNil(o.Countries) {
		toSerialize["countries"] = o.Countries
	}
	if !isNil(o.PredefinedSources) {
		toSerialize["predefined_sources"] = o.PredefinedSources
	}
	if !isNil(o.IncludeAdditionalInfo) {
		toSerialize["include_additional_info"] = o.IncludeAdditionalInfo
	}
	if !isNil(o.FromRank) {
		toSerialize["from_rank"] = o.FromRank
	}
	if !isNil(o.ToRank) {
		toSerialize["to_rank"] = o.ToRank
	}
	if o.SourceName != nil {
		toSerialize["source_name"] = o.SourceName
	}
	if !isNil(o.SourceUrl) {
		toSerialize["source_url"] = o.SourceUrl
	}
	return json.Marshal(toSerialize)
}

type NullableSourcesRequest struct {
	value *SourcesRequest
	isSet bool
}

func (v NullableSourcesRequest) Get() *SourcesRequest {
	return v.value
}

func (v *NullableSourcesRequest) Set(val *SourcesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSourcesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSourcesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourcesRequest(val *SourcesRequest) *NullableSourcesRequest {
	return &NullableSourcesRequest{value: val, isSet: true}
}

func (v NullableSourcesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourcesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


