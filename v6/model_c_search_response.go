/*
NewsCatcher-V3 Production API

<img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>

API version: 3.2.16
Contact: maksym@newscatcherapi.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package newscatcherapi

import (
	"encoding/json"
)

// CSearchResponse SearchResponse DTO class.
type CSearchResponse struct {
	Status *string `json:"status,omitempty"`
	TotalHits int32 `json:"total_hits"`
	Page int32 `json:"page"`
	TotalPages int32 `json:"total_pages"`
	PageSize int32 `json:"page_size"`
	Articles []map[string]interface{} `json:"articles,omitempty"`
	UserInput map[string]interface{} `json:"user_input"`
	ClustersCount *int32 `json:"clusters_count,omitempty"`
	Clusters []Cluster1 `json:"clusters,omitempty"`
}

// NewCSearchResponse instantiates a new CSearchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSearchResponse(totalHits int32, page int32, totalPages int32, pageSize int32, userInput map[string]interface{}) *CSearchResponse {
	this := CSearchResponse{}
	var status string = "ok"
	this.Status = &status
	this.TotalHits = totalHits
	this.Page = page
	this.TotalPages = totalPages
	this.PageSize = pageSize
	this.UserInput = userInput
	return &this
}

// NewCSearchResponseWithDefaults instantiates a new CSearchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSearchResponseWithDefaults() *CSearchResponse {
	this := CSearchResponse{}
	var status string = "ok"
	this.Status = &status
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CSearchResponse) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSearchResponse) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CSearchResponse) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CSearchResponse) SetStatus(v string) {
	o.Status = &v
}

// GetTotalHits returns the TotalHits field value
func (o *CSearchResponse) GetTotalHits() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalHits
}

// GetTotalHitsOk returns a tuple with the TotalHits field value
// and a boolean to check if the value has been set.
func (o *CSearchResponse) GetTotalHitsOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TotalHits, true
}

// SetTotalHits sets field value
func (o *CSearchResponse) SetTotalHits(v int32) {
	o.TotalHits = v
}

// GetPage returns the Page field value
func (o *CSearchResponse) GetPage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *CSearchResponse) GetPageOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *CSearchResponse) SetPage(v int32) {
	o.Page = v
}

// GetTotalPages returns the TotalPages field value
func (o *CSearchResponse) GetTotalPages() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalPages
}

// GetTotalPagesOk returns a tuple with the TotalPages field value
// and a boolean to check if the value has been set.
func (o *CSearchResponse) GetTotalPagesOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TotalPages, true
}

// SetTotalPages sets field value
func (o *CSearchResponse) SetTotalPages(v int32) {
	o.TotalPages = v
}

// GetPageSize returns the PageSize field value
func (o *CSearchResponse) GetPageSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value
// and a boolean to check if the value has been set.
func (o *CSearchResponse) GetPageSizeOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.PageSize, true
}

// SetPageSize sets field value
func (o *CSearchResponse) SetPageSize(v int32) {
	o.PageSize = v
}

// GetArticles returns the Articles field value if set, zero value otherwise.
func (o *CSearchResponse) GetArticles() []map[string]interface{} {
	if o == nil || isNil(o.Articles) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Articles
}

// GetArticlesOk returns a tuple with the Articles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSearchResponse) GetArticlesOk() ([]map[string]interface{}, bool) {
	if o == nil || isNil(o.Articles) {
    return nil, false
	}
	return o.Articles, true
}

// HasArticles returns a boolean if a field has been set.
func (o *CSearchResponse) HasArticles() bool {
	if o != nil && !isNil(o.Articles) {
		return true
	}

	return false
}

// SetArticles gets a reference to the given []map[string]interface{} and assigns it to the Articles field.
func (o *CSearchResponse) SetArticles(v []map[string]interface{}) {
	o.Articles = v
}

// GetUserInput returns the UserInput field value
func (o *CSearchResponse) GetUserInput() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.UserInput
}

// GetUserInputOk returns a tuple with the UserInput field value
// and a boolean to check if the value has been set.
func (o *CSearchResponse) GetUserInputOk() (map[string]interface{}, bool) {
	if o == nil {
    return map[string]interface{}{}, false
	}
	return o.UserInput, true
}

// SetUserInput sets field value
func (o *CSearchResponse) SetUserInput(v map[string]interface{}) {
	o.UserInput = v
}

// GetClustersCount returns the ClustersCount field value if set, zero value otherwise.
func (o *CSearchResponse) GetClustersCount() int32 {
	if o == nil || isNil(o.ClustersCount) {
		var ret int32
		return ret
	}
	return *o.ClustersCount
}

// GetClustersCountOk returns a tuple with the ClustersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSearchResponse) GetClustersCountOk() (*int32, bool) {
	if o == nil || isNil(o.ClustersCount) {
    return nil, false
	}
	return o.ClustersCount, true
}

// HasClustersCount returns a boolean if a field has been set.
func (o *CSearchResponse) HasClustersCount() bool {
	if o != nil && !isNil(o.ClustersCount) {
		return true
	}

	return false
}

// SetClustersCount gets a reference to the given int32 and assigns it to the ClustersCount field.
func (o *CSearchResponse) SetClustersCount(v int32) {
	o.ClustersCount = &v
}

// GetClusters returns the Clusters field value if set, zero value otherwise.
func (o *CSearchResponse) GetClusters() []Cluster1 {
	if o == nil || isNil(o.Clusters) {
		var ret []Cluster1
		return ret
	}
	return o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSearchResponse) GetClustersOk() ([]Cluster1, bool) {
	if o == nil || isNil(o.Clusters) {
    return nil, false
	}
	return o.Clusters, true
}

// HasClusters returns a boolean if a field has been set.
func (o *CSearchResponse) HasClusters() bool {
	if o != nil && !isNil(o.Clusters) {
		return true
	}

	return false
}

// SetClusters gets a reference to the given []Cluster1 and assigns it to the Clusters field.
func (o *CSearchResponse) SetClusters(v []Cluster1) {
	o.Clusters = v
}

func (o CSearchResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["total_hits"] = o.TotalHits
	}
	if true {
		toSerialize["page"] = o.Page
	}
	if true {
		toSerialize["total_pages"] = o.TotalPages
	}
	if true {
		toSerialize["page_size"] = o.PageSize
	}
	if !isNil(o.Articles) {
		toSerialize["articles"] = o.Articles
	}
	if true {
		toSerialize["user_input"] = o.UserInput
	}
	if !isNil(o.ClustersCount) {
		toSerialize["clusters_count"] = o.ClustersCount
	}
	if !isNil(o.Clusters) {
		toSerialize["clusters"] = o.Clusters
	}
	return json.Marshal(toSerialize)
}

type NullableCSearchResponse struct {
	value *CSearchResponse
	isSet bool
}

func (v NullableCSearchResponse) Get() *CSearchResponse {
	return v.value
}

func (v *NullableCSearchResponse) Set(val *CSearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSearchResponse(val *CSearchResponse) *NullableCSearchResponse {
	return &NullableCSearchResponse{value: val, isSet: true}
}

func (v NullableCSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


