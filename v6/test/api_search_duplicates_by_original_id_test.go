/*
NewsCatcher-V3 Production API

Testing SearchDuplicatesByOriginalIdApiService

*/

// Code generated by Konfig (https://konfigthis.com);

package newscatcherapi

import (
    "testing"
    // "github.com/stretchr/testify/assert"
    // "github.com/stretchr/testify/require"
    // newscatcherapi "github.com/konfig-dev/newscatcher-go-sdk"
)

func Test_newscatcherapi_SearchDuplicatesByOriginalIdApiService(t *testing.T) {

    // configuration := newscatcherapi.NewConfiguration()
    // configuration.SetHost("http://127.0.0.1:4010")
    /* 
    configuration.SetApiKey("X_API_TOKEN")
    client := newscatcherapi.NewAPIClient(configuration)
    */

    t.Run("Test SearchDuplicatesByOriginalIdApiService Get", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        request := client.SearchDuplicatesByOriginalIdApi.Get(
            "originalArticleId_example",
        )
        request.Page(1)
        request.PageSize(100)
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test SearchDuplicatesByOriginalIdApiService Post", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        
        duplicatesByOriginalIdRequest := *newscatcherapi.NewDuplicatesByOriginalIdRequest(
            "null",
        )
        duplicatesByOriginalIdRequest.SetPage(1)
        duplicatesByOriginalIdRequest.SetPageSize(100)
        
        request := client.SearchDuplicatesByOriginalIdApi.Post(
            duplicatesByOriginalIdRequest,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

}