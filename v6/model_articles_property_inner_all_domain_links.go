/*
NewsCatcher-V3 Production API

<img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>

API version: 3.2.16
Contact: maksym@newscatcherapi.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package newscatcherapi

import (
	"encoding/json"
	"fmt"
)

// ArticlesPropertyInnerAllDomainLinks - struct for ArticlesPropertyInnerAllDomainLinks
type ArticlesPropertyInnerAllDomainLinks struct {
	AllDomainLinksProperty *AllDomainLinksProperty
}

// AllDomainLinksPropertyAsArticlesPropertyInnerAllDomainLinks is a convenience function that returns AllDomainLinksProperty wrapped in ArticlesPropertyInnerAllDomainLinks
func AllDomainLinksPropertyAsArticlesPropertyInnerAllDomainLinks(v *AllDomainLinksProperty) ArticlesPropertyInnerAllDomainLinks {
	return ArticlesPropertyInnerAllDomainLinks{
		AllDomainLinksProperty: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ArticlesPropertyInnerAllDomainLinks) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AllDomainLinksProperty
	err = newStrictDecoder(data).Decode(&dst.AllDomainLinksProperty)
	if err == nil {
		jsonAllDomainLinksProperty, _ := json.Marshal(dst.AllDomainLinksProperty)
		if string(jsonAllDomainLinksProperty) == "{}" { // empty struct
			dst.AllDomainLinksProperty = nil
		} else {
			match++
		}
	} else {
		dst.AllDomainLinksProperty = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AllDomainLinksProperty = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ArticlesPropertyInnerAllDomainLinks)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ArticlesPropertyInnerAllDomainLinks)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ArticlesPropertyInnerAllDomainLinks) MarshalJSON() ([]byte, error) {
	if src.AllDomainLinksProperty != nil {
		return json.Marshal(&src.AllDomainLinksProperty)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ArticlesPropertyInnerAllDomainLinks) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AllDomainLinksProperty != nil {
		return obj.AllDomainLinksProperty
	}

	// all schemas are nil
	return nil
}

type NullableArticlesPropertyInnerAllDomainLinks struct {
	value *ArticlesPropertyInnerAllDomainLinks
	isSet bool
}

func (v NullableArticlesPropertyInnerAllDomainLinks) Get() *ArticlesPropertyInnerAllDomainLinks {
	return v.value
}

func (v *NullableArticlesPropertyInnerAllDomainLinks) Set(val *ArticlesPropertyInnerAllDomainLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableArticlesPropertyInnerAllDomainLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableArticlesPropertyInnerAllDomainLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArticlesPropertyInnerAllDomainLinks(val *ArticlesPropertyInnerAllDomainLinks) *NullableArticlesPropertyInnerAllDomainLinks {
	return &NullableArticlesPropertyInnerAllDomainLinks{value: val, isSet: true}
}

func (v NullableArticlesPropertyInnerAllDomainLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArticlesPropertyInnerAllDomainLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


