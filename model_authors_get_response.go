/*
NewsCatcher-V3 Production API

<img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>

API version: Beta-3.0.0
Contact: maksym@newscatcherapi.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package newscatcherapi

import (
	"encoding/json"
	"fmt"
)

// AuthorsGetResponse struct for AuthorsGetResponse
type AuthorsGetResponse struct {
	DtoResponsesAuthorSearchResponseFailedSearchResponse *DtoResponsesAuthorSearchResponseFailedSearchResponse
	DtoResponsesAuthorSearchResponseSearchResponse *DtoResponsesAuthorSearchResponseSearchResponse
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *AuthorsGetResponse) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into DtoResponsesAuthorSearchResponseFailedSearchResponse
	err = json.Unmarshal(data, &dst.DtoResponsesAuthorSearchResponseFailedSearchResponse);
	if err == nil {
		jsonDtoResponsesAuthorSearchResponseFailedSearchResponse, _ := json.Marshal(dst.DtoResponsesAuthorSearchResponseFailedSearchResponse)
		if string(jsonDtoResponsesAuthorSearchResponseFailedSearchResponse) == "{}" { // empty struct
			dst.DtoResponsesAuthorSearchResponseFailedSearchResponse = nil
		} else {
			return nil // data stored in dst.DtoResponsesAuthorSearchResponseFailedSearchResponse, return on the first match
		}
	} else {
		dst.DtoResponsesAuthorSearchResponseFailedSearchResponse = nil
	}

	// try to unmarshal JSON data into DtoResponsesAuthorSearchResponseSearchResponse
	err = json.Unmarshal(data, &dst.DtoResponsesAuthorSearchResponseSearchResponse);
	if err == nil {
		jsonDtoResponsesAuthorSearchResponseSearchResponse, _ := json.Marshal(dst.DtoResponsesAuthorSearchResponseSearchResponse)
		if string(jsonDtoResponsesAuthorSearchResponseSearchResponse) == "{}" { // empty struct
			dst.DtoResponsesAuthorSearchResponseSearchResponse = nil
		} else {
			return nil // data stored in dst.DtoResponsesAuthorSearchResponseSearchResponse, return on the first match
		}
	} else {
		dst.DtoResponsesAuthorSearchResponseSearchResponse = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(AuthorsGetResponse)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *AuthorsGetResponse) MarshalJSON() ([]byte, error) {
	if src.DtoResponsesAuthorSearchResponseFailedSearchResponse != nil {
		return json.Marshal(&src.DtoResponsesAuthorSearchResponseFailedSearchResponse)
	}

	if src.DtoResponsesAuthorSearchResponseSearchResponse != nil {
		return json.Marshal(&src.DtoResponsesAuthorSearchResponseSearchResponse)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableAuthorsGetResponse struct {
	value *AuthorsGetResponse
	isSet bool
}

func (v NullableAuthorsGetResponse) Get() *AuthorsGetResponse {
	return v.value
}

func (v *NullableAuthorsGetResponse) Set(val *AuthorsGetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorsGetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorsGetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorsGetResponse(val *AuthorsGetResponse) *NullableAuthorsGetResponse {
	return &NullableAuthorsGetResponse{value: val, isSet: true}
}

func (v NullableAuthorsGetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorsGetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


